/* The following code was generated by JFlex 1.6.1 */

package pruebaa;
import static pruebaa.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/maldad/repos/automatas/lexico/arduino/PruebaA/src/pruebaa/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\11\1\12\1\12\1\11\22\0\1\6\1\40\1\0"+
    "\1\27\1\0\1\36\1\43\1\0\1\24\1\25\1\35\1\33\1\4"+
    "\1\34\1\72\1\10\12\2\1\72\1\72\1\41\1\37\1\42\2\0"+
    "\4\3\1\71\1\3\1\57\1\55\1\56\2\3\1\60\1\70\1\63"+
    "\1\61\1\64\1\3\1\67\1\3\1\5\1\65\1\3\1\62\3\3"+
    "\3\0\1\45\1\3\1\0\1\50\1\52\1\32\1\16\1\20\1\30"+
    "\1\54\1\47\1\15\1\1\1\53\1\26\1\75\1\31\1\14\1\23"+
    "\1\1\1\51\1\17\1\21\1\22\1\13\1\46\1\1\1\66\1\1"+
    "\1\73\1\44\1\74\1\45\6\0\1\12\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\1\4\2\5\1\6\10\1"+
    "\2\7\1\1\1\2\2\1\4\6\1\10\1\11\2\12"+
    "\3\13\5\1\5\2\1\14\1\15\1\1\2\0\1\5"+
    "\1\16\1\1\1\17\1\1\1\17\10\1\1\7\1\1"+
    "\2\0\5\1\1\20\1\21\1\12\1\11\11\1\5\0"+
    "\1\1\1\0\1\22\2\1\1\23\13\1\2\0\15\1"+
    "\2\0\1\24\1\0\1\23\6\1\1\25\2\1\2\0"+
    "\7\1\3\0\7\1\2\0\1\26\4\1\3\0\2\1"+
    "\1\0\3\1\2\0\3\1\3\0\2\1\1\0\3\1"+
    "\1\27\2\1\1\26\2\0\2\1\1\30\2\1\1\0"+
    "\2\1\1\0\3\1\3\0\2\1\1\0\3\1\5\0"+
    "\2\1\1\31\3\1\5\0\1\1\2\0\2\1\1\23"+
    "\2\0\1\32\7\0\1\1\1\23\3\0\1\33\3\0"+
    "\1\1\7\0\1\1\7\0\1\1\6\0\1\1\45\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\76\0\u0136"+
    "\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\76\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\76\0\u0554\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\76\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\76\0\76\0\u08f6\0\u0934\0\370"+
    "\0\u0972\0\76\0\u09b0\0\174\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\76"+
    "\0\76\0\76\0\76\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\76\0\u1268\0\u12a6\0\174\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\76\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\174\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\174\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\76\0\u27b8\0\u27f6\0\76\0\u2834\0\u2872\0\u28b0\0\u28ee"+
    "\0\76\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\76\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222"+
    "\0\76\0\u3260\0\u329e\0\76\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586"+
    "\0\76\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8"+
    "\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\7\1\0\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\3"+
    "\1\43\1\44\1\45\1\3\1\46\1\47\1\50\1\2"+
    "\1\51\1\52\2\2\1\53\1\2\1\3\3\2\1\5"+
    "\1\54\1\55\1\3\77\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\11\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\2\0"+
    "\1\4\101\0\1\60\15\0\1\21\61\0\1\61\26\0"+
    "\1\62\37\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\1\3\1\63\7\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\1\64\1\65\1\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\1\3\1\66\1\67\2\3"+
    "\1\70\3\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\6\3\1\71\2\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\1\72\6\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\73"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\3\3"+
    "\1\74\3\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\1\3\1\75\1\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\2\3\1\76\6\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\6\0\1\77\16\0\1\22\51\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\1\3\1\100"+
    "\7\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\15\0\1\101\1\102"+
    "\60\0\1\3\1\0\1\56\1\0\1\56\5\0\1\3"+
    "\1\103\7\3\1\57\1\0\1\104\1\0\3\3\13\0"+
    "\2\3\1\105\4\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\1\3"+
    "\1\106\7\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\1\3\1\107\1\73\4\3\11\56\1\3\3\56\3\0"+
    "\1\3\33\0\1\110\3\0\1\62\72\0\1\111\2\0"+
    "\1\62\75\0\1\62\75\0\1\112\75\0\1\112\1\0"+
    "\1\41\73\0\1\112\2\0\1\41\72\0\1\62\3\0"+
    "\1\113\71\0\1\62\4\0\1\113\32\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\1\3\1\114\7\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\1\3\1\115\5\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\1\3\1\116\1\3\13\0\3\3\1\117\3\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\5\3\1\120\3\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\1\3\1\121\7\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\3\3\1\122\3\3\11\56\1\123"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\1\3\1\124\7\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\56\0\1\125\102\0\1\126\73\0\1\127\101\0"+
    "\1\130\77\0\1\131\7\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\11\56\1\57\1\0\1\56\1\0\3\56"+
    "\13\0\7\56\11\133\1\56\3\133\3\0\1\56\25\0"+
    "\1\134\50\0\11\61\2\0\63\61\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\2\3\1\135\6\3\1\57"+
    "\1\0\1\136\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\6\3\1\137\2\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\7\3\1\140\1\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\6\3\1\141\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\11\3\1\57\1\0\1\142\1\0"+
    "\3\3\13\0\7\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\11\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\2\3\1\143"+
    "\1\144\3\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\2\3\1\145"+
    "\6\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\4\3\1\146\4\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\7\3\1\147\1\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\4\3\1\150\4\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\1\3\1\151\1\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\6\0\1\77\70\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\1\3\1\152\1\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\31\0\1\153\64\0"+
    "\1\154\56\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\3\3"+
    "\1\64\3\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\1\3\1\155"+
    "\7\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\156"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\1\3\1\157\1\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\2\3\1\160\4\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\3\3\1\161\3\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\2\3\1\162\6\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\2\3"+
    "\1\163\4\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\3\3\1\164\3\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\6\3\1\165\2\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\1\3\1\166\7\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\5\3\1\167\3\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\6\3\1\170"+
    "\2\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\6\3\1\171\2\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\57\0\1\172\102\0\1\173\73\0"+
    "\1\174\20\0\1\126\151\0\1\175\15\0\2\132\10\0"+
    "\11\132\2\0\1\132\1\0\3\132\13\0\7\132\11\0"+
    "\1\132\6\0\1\132\1\0\1\133\1\0\1\133\1\0"+
    "\1\133\5\0\11\133\1\57\1\0\1\133\1\0\3\133"+
    "\13\0\24\133\3\0\1\133\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\3\3\1\176\5\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\2\3\1\177\4\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\11\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\4\3\1\200"+
    "\2\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\2\3\1\201\6\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\11\3\1\57\1\0\1\3\1\0"+
    "\3\3\13\0\2\3\1\202\4\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\6\3\1\203\2\3\1\57\1\0\1\3\1\0"+
    "\3\3\13\0\7\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\2\3"+
    "\1\100\6\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\6\3\1\204\2\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\5\3\1\64\3\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\5\3\1\205\3\3\1\57\1\0\1\3\1\0"+
    "\3\3\13\0\7\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\2\3"+
    "\1\206\6\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\11\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\1\56"+
    "\1\207\1\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\11\3\1\57\1\0\1\3\1\0"+
    "\3\3\13\0\6\3\1\137\11\56\1\3\3\56\3\0"+
    "\1\3\32\0\1\210\73\0\1\211\46\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\2\3\1\65\4\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\4\3\1\147\4\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\4\3\1\212\1\3\1\213\2\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\3\3"+
    "\1\137\3\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\3\3\1\137"+
    "\5\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\146"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\214\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\2\3\1\215\4\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\7\3\1\216\1\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\217\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\2\3\1\220\4\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\5\3\1\137\3\3\1\57\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\1\3\1\64\7\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\55\0"+
    "\1\174\105\0\1\221\67\0\1\222\17\0\1\3\1\0"+
    "\1\56\1\0\1\56\1\223\4\0\11\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\6\3\1\224\2\3\1\57\1\0\1\3\1\0"+
    "\3\3\13\0\7\3\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\11\3"+
    "\1\57\1\0\1\170\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\6\3\1\225\2\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\226\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\2\3\1\227\6\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\11\3\1\57\1\0\1\3\1\0"+
    "\2\3\1\230\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\6\3"+
    "\1\231\11\56\1\3\3\56\3\0\1\3\1\0\1\56"+
    "\1\132\1\133\1\0\1\133\5\0\1\56\1\232\7\56"+
    "\1\57\1\0\1\56\1\0\3\56\13\0\7\56\11\133"+
    "\1\56\3\133\3\0\1\56\26\0\1\233\64\0\1\234"+
    "\61\0\1\3\1\0\1\56\1\0\1\56\5\0\6\3"+
    "\1\235\2\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\2\3\1\236\6\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\1\3\1\237\7\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\137\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\11\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\3\3\1\240\3\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\5\3\1\241\3\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\5\3\1\64\1\3\11\56\1\3\3\56\3\0\1\3"+
    "\5\0\1\174\160\0\1\242\24\0\1\243\6\0\1\244"+
    "\50\0\1\3\1\0\1\56\1\0\1\56\5\0\2\3"+
    "\1\245\6\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\11\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\2\3\1\246\4\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\11\3\1\247\1\0\1\3\1\0"+
    "\3\3\13\0\7\3\11\56\1\3\1\56\1\250\1\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\2\3\1\235"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\1\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\11\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\1\3\1\64\5\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\1\3\1\251\1\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\3\56\1\252\5\56\1\57\1\0\1\56"+
    "\1\0\3\56\13\0\7\56\11\133\1\56\3\133\3\0"+
    "\1\56\22\0\1\253\104\0\1\254\45\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\57\1\0\1\3"+
    "\1\0\1\3\1\255\1\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\11\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\6\3\1\256\11\56\1\3\3\56\3\0\1\3"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\5\0\11\3"+
    "\1\57\1\0\1\3\1\0\1\3\1\64\1\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\11\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\2\3\1\257\4\3\11\56"+
    "\1\3\3\56\3\0\1\3\71\0\1\260\24\0\1\261"+
    "\71\0\1\262\62\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\263\1\0\3\3\13\0"+
    "\7\3\11\56\1\3\3\56\3\0\1\3\1\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\11\3\1\57\1\0"+
    "\1\264\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\2\0\1\265\22\0\1\134\51\0\1\56"+
    "\1\132\1\133\1\0\1\133\5\0\2\56\1\266\6\56"+
    "\1\57\1\0\1\56\1\0\3\56\13\0\7\56\11\133"+
    "\1\56\3\133\3\0\1\56\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\5\3\1\267\3\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\56\1\132\1\133\1\0\1\133"+
    "\5\0\5\56\1\270\3\56\1\57\1\0\1\56\1\0"+
    "\3\56\13\0\7\56\11\133\1\56\3\133\3\0\1\56"+
    "\16\0\1\254\77\0\1\271\56\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\7\3\1\146\1\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\3\1\0\1\56\1\0\1\56"+
    "\5\0\11\3\1\57\1\0\1\3\1\0\3\3\13\0"+
    "\7\3\5\56\1\272\3\56\1\3\1\273\2\56\3\0"+
    "\1\3\1\0\1\3\1\0\1\56\1\0\1\56\5\0"+
    "\11\3\1\57\1\0\1\3\1\0\1\3\1\137\1\3"+
    "\13\0\7\3\11\56\1\3\3\56\3\0\1\3\70\0"+
    "\1\274\26\0\1\275\70\0\1\276\62\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\5\3\1\235\3\3\1\57"+
    "\1\0\1\3\1\0\3\3\13\0\7\3\11\56\1\3"+
    "\3\56\3\0\1\3\1\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\11\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\3\3\1\277\3\3\5\56\1\300\3\56\1\3"+
    "\3\56\3\0\1\3\2\0\1\265\22\0\1\301\51\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\11\56\1\57"+
    "\1\0\1\56\1\0\2\56\1\302\13\0\7\56\11\133"+
    "\1\56\3\133\3\0\1\56\1\0\1\3\1\0\1\56"+
    "\1\0\1\56\5\0\3\3\1\303\5\3\1\57\1\0"+
    "\1\3\1\0\3\3\13\0\7\3\11\56\1\3\3\56"+
    "\3\0\1\3\1\0\1\56\1\132\1\133\1\0\1\133"+
    "\5\0\11\56\1\304\1\0\1\56\1\0\3\56\13\0"+
    "\7\56\11\133\1\56\3\133\3\0\1\56\1\0\1\56"+
    "\1\132\1\133\1\0\1\133\5\0\11\56\1\57\1\0"+
    "\1\56\1\0\3\56\13\0\3\56\1\305\3\56\11\133"+
    "\1\56\3\133\3\0\1\56\1\0\1\56\1\132\1\133"+
    "\1\0\1\133\5\0\5\56\1\306\3\56\1\57\1\0"+
    "\1\56\1\0\3\56\13\0\7\56\11\133\1\56\3\133"+
    "\3\0\1\56\22\0\1\276\76\0\1\307\53\0\1\3"+
    "\1\0\1\56\1\0\1\56\5\0\5\3\1\310\3\3"+
    "\1\57\1\0\1\3\1\0\3\3\13\0\7\3\11\56"+
    "\1\3\3\56\3\0\1\3\1\0\1\56\1\132\1\133"+
    "\1\0\1\133\5\0\11\56\1\57\1\0\1\56\1\0"+
    "\3\56\13\0\3\56\1\311\3\56\11\133\1\56\3\133"+
    "\3\0\1\56\1\0\1\56\1\132\1\133\1\0\1\133"+
    "\5\0\11\56\1\57\1\0\1\56\1\0\3\56\13\0"+
    "\3\56\1\312\3\56\11\133\1\56\3\133\3\0\1\56"+
    "\1\0\1\3\1\0\1\56\1\0\1\56\1\313\4\0"+
    "\11\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\2\314\10\0"+
    "\10\314\1\315\1\0\1\134\1\314\1\0\3\314\13\0"+
    "\7\314\11\0\1\314\6\0\1\314\1\0\1\56\1\132"+
    "\1\133\1\0\1\133\5\0\2\56\1\316\6\56\1\57"+
    "\1\0\1\56\1\0\3\56\13\0\7\56\11\133\1\56"+
    "\3\133\3\0\1\56\1\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\11\56\1\57\1\0\1\56\1\0\3\56"+
    "\13\0\2\56\1\317\4\56\11\133\1\56\3\133\3\0"+
    "\1\56\24\0\1\320\52\0\1\3\1\0\1\56\1\0"+
    "\1\56\5\0\11\3\1\57\1\0\1\3\1\0\3\3"+
    "\13\0\2\3\1\321\4\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\56\1\132\1\133\1\0\1\133\5\0"+
    "\2\56\1\322\6\56\1\57\1\0\1\56\1\0\3\56"+
    "\13\0\7\56\11\133\1\56\3\133\3\0\1\56\1\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\1\56\1\323"+
    "\7\56\1\57\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\15\0\1\324\10\0"+
    "\1\325\3\0\1\326\44\0\3\314\1\327\1\314\5\0"+
    "\11\314\2\0\1\314\1\0\3\314\13\0\24\314\3\0"+
    "\1\314\1\0\3\314\1\327\1\314\5\0\2\314\1\330"+
    "\6\314\2\0\1\314\1\0\3\314\13\0\24\314\3\0"+
    "\1\314\1\0\1\56\1\132\1\133\1\0\1\133\5\0"+
    "\6\56\1\331\2\56\1\57\1\0\1\56\1\0\3\56"+
    "\13\0\7\56\11\133\1\56\3\133\3\0\1\56\1\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\3\56\1\332"+
    "\5\56\1\57\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\25\0\1\333\51\0"+
    "\1\3\1\0\1\56\1\0\1\56\5\0\3\3\1\334"+
    "\5\3\1\57\1\0\1\3\1\0\3\3\13\0\7\3"+
    "\11\56\1\3\3\56\3\0\1\3\1\0\1\56\1\132"+
    "\1\133\1\0\1\133\5\0\6\56\1\335\2\56\1\57"+
    "\1\0\1\56\1\0\3\56\13\0\7\56\11\133\1\56"+
    "\3\133\3\0\1\56\1\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\4\56\1\336\4\56\1\57\1\0\1\56"+
    "\1\0\3\56\13\0\7\56\11\133\1\56\3\133\3\0"+
    "\1\56\31\0\1\337\60\0\1\340\130\0\1\341\32\0"+
    "\3\342\46\0\11\342\11\0\3\314\1\327\1\314\5\0"+
    "\11\314\2\0\1\314\1\0\1\314\1\343\1\314\13\0"+
    "\24\314\3\0\1\314\1\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\5\56\1\344\3\56\1\57\1\0\1\56"+
    "\1\0\3\56\13\0\7\56\11\133\1\56\3\133\3\0"+
    "\1\56\1\0\1\56\1\132\1\133\1\0\1\133\5\0"+
    "\11\56\1\345\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\1\0\1\3\1\0"+
    "\1\56\1\0\1\56\5\0\11\3\1\346\1\0\1\3"+
    "\1\0\3\3\13\0\7\3\11\56\1\3\3\56\3\0"+
    "\1\3\1\0\1\56\1\132\1\133\1\0\1\133\5\0"+
    "\5\56\1\347\3\56\1\57\1\0\1\56\1\0\3\56"+
    "\13\0\7\56\11\133\1\56\3\133\3\0\1\56\1\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\5\56\1\350"+
    "\3\56\1\57\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\21\0\1\351\105\0"+
    "\1\352\114\0\1\353\31\0\3\342\16\0\1\354\27\0"+
    "\11\342\11\0\3\314\1\327\1\314\5\0\11\314\2\0"+
    "\1\314\1\0\3\314\13\0\22\314\1\355\1\314\3\0"+
    "\1\314\1\0\1\56\1\132\1\133\1\0\1\133\5\0"+
    "\11\56\1\356\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\1\0\1\357\11\0"+
    "\11\357\1\0\1\134\1\357\1\0\3\357\13\0\2\357"+
    "\1\360\4\357\11\0\1\357\6\0\1\357\1\0\1\361"+
    "\11\0\3\361\1\362\5\361\1\0\1\134\1\361\1\0"+
    "\3\361\13\0\7\361\11\0\1\361\6\0\1\361\1\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\11\56\1\363"+
    "\1\0\1\56\1\0\3\56\13\0\7\56\11\133\1\56"+
    "\3\133\3\0\1\56\1\0\1\56\1\132\1\133\1\0"+
    "\1\133\5\0\11\56\1\57\1\0\1\56\1\0\2\56"+
    "\1\364\13\0\7\56\11\133\1\56\3\133\3\0\1\56"+
    "\54\0\1\365\72\0\1\351\25\0\3\314\1\327\1\314"+
    "\5\0\1\314\1\366\7\314\2\0\1\314\1\0\3\314"+
    "\13\0\24\314\3\0\1\314\1\0\1\367\11\0\11\367"+
    "\1\0\1\134\1\367\1\0\3\367\13\0\2\367\1\370"+
    "\4\367\11\0\1\367\6\0\1\367\1\0\3\357\1\0"+
    "\1\357\5\0\11\357\1\0\1\371\1\357\1\0\3\357"+
    "\13\0\24\357\3\0\1\357\1\0\3\357\1\0\1\357"+
    "\5\0\11\357\1\0\1\371\1\357\1\0\1\357\1\372"+
    "\1\357\13\0\24\357\3\0\1\357\1\0\3\361\1\0"+
    "\1\361\5\0\11\361\1\0\1\354\1\361\1\0\3\361"+
    "\13\0\24\361\3\0\1\361\1\0\3\361\1\0\1\361"+
    "\5\0\2\361\1\373\6\361\1\0\1\354\1\361\1\0"+
    "\3\361\13\0\24\361\3\0\1\361\1\0\2\314\10\0"+
    "\3\314\1\374\5\314\1\0\1\134\1\314\1\0\3\314"+
    "\13\0\7\314\11\0\1\314\6\0\1\314\1\0\1\56"+
    "\1\132\1\133\1\0\1\133\5\0\1\56\1\375\7\56"+
    "\1\57\1\0\1\56\1\0\3\56\13\0\7\56\11\133"+
    "\1\56\3\133\3\0\1\56\6\0\1\376\70\0\3\314"+
    "\1\327\1\314\5\0\3\314\1\377\5\314\2\0\1\314"+
    "\1\0\3\314\13\0\24\314\3\0\1\314\1\0\3\367"+
    "\1\u0100\1\367\5\0\11\367\2\0\1\367\1\0\3\367"+
    "\13\0\24\367\3\0\1\367\1\0\3\367\1\u0100\1\367"+
    "\5\0\11\367\2\0\1\367\1\0\1\367\1\u0101\1\367"+
    "\13\0\24\367\3\0\1\367\1\0\3\357\1\0\1\357"+
    "\5\0\11\357\1\0\1\371\1\357\1\0\3\357\13\0"+
    "\2\357\1\u0102\21\357\3\0\1\357\1\0\3\361\1\0"+
    "\1\361\5\0\11\361\1\0\1\354\1\361\1\0\3\361"+
    "\13\0\6\361\1\u0103\15\361\3\0\1\361\1\0\3\314"+
    "\1\327\1\314\5\0\2\314\1\u0104\6\314\2\0\1\314"+
    "\1\0\3\314\13\0\24\314\3\0\1\314\1\0\1\56"+
    "\1\132\1\133\1\0\1\133\5\0\11\56\1\57\1\0"+
    "\1\56\1\0\1\56\1\u0105\1\56\13\0\7\56\11\133"+
    "\1\56\3\133\3\0\1\56\75\0\1\u0106\1\0\3\314"+
    "\1\327\1\314\5\0\5\314\1\u0107\3\314\2\0\1\314"+
    "\1\0\3\314\13\0\24\314\3\0\1\314\4\0\3\u0108"+
    "\46\0\11\u0108\11\0\3\367\1\u0100\1\367\5\0\11\367"+
    "\2\0\1\367\1\0\3\367\13\0\2\367\1\u0109\21\367"+
    "\3\0\1\367\1\0\3\357\1\0\1\357\5\0\11\357"+
    "\1\0\1\371\1\u010a\1\0\3\357\13\0\24\357\3\0"+
    "\1\357\1\0\3\361\1\0\1\361\5\0\2\361\1\u010b"+
    "\6\361\1\0\1\354\1\361\1\0\3\361\13\0\24\361"+
    "\3\0\1\361\1\0\3\314\1\327\1\314\5\0\11\314"+
    "\2\0\1\314\1\0\3\314\13\0\6\314\1\u010c\15\314"+
    "\3\0\1\314\1\0\1\56\1\132\1\133\1\0\1\133"+
    "\5\0\3\56\1\u010d\5\56\1\57\1\0\1\56\1\0"+
    "\3\56\13\0\7\56\11\133\1\56\3\133\3\0\1\56"+
    "\15\0\1\u010e\61\0\3\314\1\327\1\314\5\0\11\314"+
    "\1\u010f\1\0\1\314\1\0\3\314\13\0\24\314\3\0"+
    "\1\314\4\0\3\u0108\16\0\1\371\27\0\11\u0108\11\0"+
    "\3\367\1\u0100\1\367\5\0\11\367\2\0\1\u0110\1\0"+
    "\3\367\13\0\24\367\3\0\1\367\1\0\3\357\1\0"+
    "\1\357\5\0\1\357\1\u0111\7\357\1\0\1\371\1\357"+
    "\1\0\3\357\13\0\24\357\3\0\1\357\1\0\3\361"+
    "\1\0\1\361\5\0\6\361\1\u0112\2\361\1\0\1\354"+
    "\1\361\1\0\3\361\13\0\24\361\3\0\1\361\1\0"+
    "\3\314\1\327\1\314\5\0\2\314\1\u0113\6\314\2\0"+
    "\1\314\1\0\3\314\13\0\24\314\3\0\1\314\1\0"+
    "\1\56\1\132\1\133\1\0\1\133\5\0\4\56\1\u0114"+
    "\4\56\1\57\1\0\1\56\1\0\3\56\13\0\7\56"+
    "\11\133\1\56\3\133\3\0\1\56\26\0\1\u0115\3\0"+
    "\1\u0116\44\0\2\314\10\0\10\314\1\315\2\0\1\314"+
    "\1\0\3\314\13\0\7\314\11\0\1\314\6\0\1\314"+
    "\1\0\3\367\1\u0100\1\367\5\0\1\367\1\u0117\7\367"+
    "\2\0\1\367\1\0\3\367\13\0\24\367\3\0\1\367"+
    "\1\0\3\357\1\0\1\357\5\0\11\357\1\0\1\371"+
    "\1\357\1\0\3\357\13\0\6\357\1\u0118\15\357\3\0"+
    "\1\357\1\0\3\361\1\0\1\361\5\0\11\361\1\0"+
    "\1\354\1\361\1\0\3\361\13\0\2\361\1\u0119\21\361"+
    "\3\0\1\361\1\0\3\314\1\327\1\314\5\0\6\314"+
    "\1\u011a\2\314\2\0\1\314\1\0\3\314\13\0\24\314"+
    "\3\0\1\314\1\0\1\56\1\132\1\133\1\0\1\133"+
    "\5\0\11\56\1\247\1\0\1\56\1\0\3\56\13\0"+
    "\7\56\11\133\1\56\3\133\3\0\1\56\26\0\1\u011b"+
    "\120\0\1\u011c\25\0\3\367\1\u0100\1\367\5\0\11\367"+
    "\2\0\1\367\1\0\3\367\13\0\6\367\1\u011d\15\367"+
    "\3\0\1\367\1\0\3\357\1\0\1\357\5\0\11\357"+
    "\1\0\1\371\1\357\1\0\3\357\13\0\21\357\1\u011e"+
    "\2\357\3\0\1\357\1\0\3\361\1\0\1\361\5\0"+
    "\11\361\1\0\1\354\1\u011f\1\0\3\361\13\0\24\361"+
    "\3\0\1\361\1\0\3\314\1\327\1\314\5\0\11\314"+
    "\2\0\1\314\1\0\3\314\13\0\2\314\1\u0120\21\314"+
    "\3\0\1\314\15\0\1\u0121\74\0\1\u0121\62\0\3\367"+
    "\1\u0100\1\367\5\0\11\367\2\0\1\367\1\0\3\367"+
    "\13\0\14\367\1\u0122\7\367\3\0\1\367\1\0\3\357"+
    "\1\0\1\357\5\0\5\357\1\u0123\3\357\1\0\1\371"+
    "\1\357\1\0\3\357\13\0\24\357\3\0\1\357\1\0"+
    "\3\361\1\0\1\361\5\0\11\361\1\0\1\354\1\361"+
    "\1\0\3\361\13\0\3\361\1\u0124\20\361\3\0\1\361"+
    "\1\0\3\314\1\327\1\314\5\0\11\314\2\0\1\u0125"+
    "\1\0\3\314\13\0\24\314\3\0\1\314\17\0\1\u0126"+
    "\57\0\3\367\1\u0100\1\367\5\0\11\367\2\0\1\367"+
    "\1\0\3\367\13\0\3\367\1\u0127\20\367\3\0\1\367"+
    "\1\0\3\357\1\0\1\357\5\0\11\357\1\0\1\371"+
    "\1\357\1\0\3\357\13\0\2\357\1\u0128\21\357\3\0"+
    "\1\357\1\0\3\361\1\0\1\361\5\0\5\361\1\u0129"+
    "\3\361\1\0\1\354\1\361\1\0\3\361\13\0\24\361"+
    "\3\0\1\361\1\0\3\314\1\327\1\314\5\0\11\314"+
    "\2\0\1\314\1\0\3\314\13\0\14\314\1\u012a\7\314"+
    "\3\0\1\314\24\0\1\u012b\52\0\3\367\1\u0100\1\367"+
    "\5\0\2\367\1\u012c\6\367\2\0\1\367\1\0\3\367"+
    "\13\0\24\367\3\0\1\367\1\0\3\357\1\0\1\357"+
    "\5\0\3\357\1\u012d\5\357\1\0\1\371\1\357\1\0"+
    "\3\357\13\0\24\357\3\0\1\357\1\0\3\361\1\0"+
    "\1\361\5\0\11\361\1\0\1\354\1\361\1\0\3\361"+
    "\13\0\2\361\1\u012e\21\361\3\0\1\361\1\0\3\314"+
    "\1\327\1\314\5\0\11\314\2\0\1\314\1\0\3\314"+
    "\13\0\3\314\1\u012f\20\314\3\0\1\314\25\0\1\301"+
    "\51\0\3\367\1\u0100\1\367\5\0\6\367\1\u0130\2\367"+
    "\2\0\1\367\1\0\3\367\13\0\24\367\3\0\1\367"+
    "\1\0\3\357\1\0\1\357\5\0\11\357\1\u0131\1\371"+
    "\1\357\1\0\3\357\13\0\24\357\3\0\1\357\1\0"+
    "\3\361\1\0\1\361\5\0\3\361\1\u0132\5\361\1\0"+
    "\1\354\1\361\1\0\3\361\13\0\24\361\3\0\1\361"+
    "\1\0\3\314\1\327\1\314\5\0\2\314\1\u0133\6\314"+
    "\2\0\1\314\1\0\3\314\13\0\24\314\3\0\1\314"+
    "\1\0\3\367\1\u0100\1\367\5\0\5\367\1\u0134\3\367"+
    "\2\0\1\367\1\0\3\367\13\0\24\367\3\0\1\367"+
    "\1\0\1\357\11\0\11\357\2\0\1\357\1\0\3\357"+
    "\13\0\2\357\1\360\4\357\11\0\1\357\6\0\1\357"+
    "\1\0\3\361\1\0\1\361\5\0\11\361\1\u0135\1\354"+
    "\1\361\1\0\3\361\13\0\24\361\3\0\1\361\1\0"+
    "\3\314\1\327\1\314\5\0\6\314\1\u0136\2\314\2\0"+
    "\1\314\1\0\3\314\13\0\24\314\3\0\1\314\1\0"+
    "\3\367\1\u0100\1\367\5\0\11\367\1\u0137\1\0\1\367"+
    "\1\0\3\367\13\0\24\367\3\0\1\367\1\0\1\361"+
    "\11\0\3\361\1\362\5\361\2\0\1\361\1\0\3\361"+
    "\13\0\7\361\11\0\1\361\6\0\1\361\1\0\3\314"+
    "\1\327\1\314\5\0\5\314\1\u0138\3\314\2\0\1\314"+
    "\1\0\3\314\13\0\24\314\3\0\1\314\1\0\1\367"+
    "\11\0\11\367\2\0\1\367\1\0\3\367\13\0\2\367"+
    "\1\370\4\367\11\0\1\367\6\0\1\367\1\0\3\314"+
    "\1\327\1\314\5\0\11\314\1\u0139\1\0\1\314\1\0"+
    "\3\314\13\0\24\314\3\0\1\314\1\0\2\314\10\0"+
    "\3\314\1\374\5\314\2\0\1\314\1\0\3\314\13\0"+
    "\7\314\11\0\1\314\6\0\1\314";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\1\1\1\11\11\1\1\11"+
    "\10\1\1\11\6\1\1\11\12\1\2\11\1\1\2\0"+
    "\1\1\1\11\16\1\2\0\5\1\4\11\11\1\5\0"+
    "\1\1\1\0\1\11\16\1\2\0\15\1\2\0\1\11"+
    "\1\0\12\1\2\0\7\1\3\0\7\1\2\0\5\1"+
    "\3\0\2\1\1\0\3\1\2\0\3\1\3\0\2\1"+
    "\1\0\3\1\1\11\2\1\1\11\2\0\2\1\1\11"+
    "\2\1\1\0\2\1\1\0\3\1\3\0\2\1\1\0"+
    "\3\1\5\0\2\1\1\11\3\1\5\0\1\1\2\0"+
    "\2\1\1\11\2\0\1\11\7\0\2\1\3\0\1\11"+
    "\3\0\1\1\7\0\1\1\7\0\1\1\6\0\1\1"+
    "\45\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int x;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 28: break;
          case 2: 
            { lexeme=yytext(); return ERROR_LEXICO;
            }
          case 29: break;
          case 3: 
            { lexeme=yytext();return INT;
            }
          case 30: break;
          case 4: 
            { return DELIMITADOR;
            }
          case 31: break;
          case 5: 
            { /* ignore */
            }
          case 32: break;
          case 6: 
            { return OPERADOR_ARITMETICO;
            }
          case 33: break;
          case 7: 
            { return PARENTESIS;
            }
          case 34: break;
          case 8: 
            { return OPERADOR_ASIGNACION;
            }
          case 35: break;
          case 9: 
            { return OPERADOR_BOOLEANO;
            }
          case 36: break;
          case 10: 
            { return OPERADOR_COMPARACION;
            }
          case 37: break;
          case 11: 
            { return OPERADOR_BIT;
            }
          case 38: break;
          case 12: 
            { return PRINCIPIO_FUNCION;
            }
          case 39: break;
          case 13: 
            { return FINAL_FUNCION;
            }
          case 40: break;
          case 14: 
            { return OPERADOR_COMPUESTO;
            }
          case 41: break;
          case 15: 
            { return ESTRUCTURAS_DE_CONTROL;
            }
          case 42: break;
          case 16: 
            { return OPERADOR_INCREMENTO;
            }
          case 43: break;
          case 17: 
            { return OPERADOR_DECREMENTO;
            }
          case 44: break;
          case 18: 
            { lexeme=yytext();return METODO;
            }
          case 45: break;
          case 19: 
            { return TIPO_DE_DATO;
            }
          case 46: break;
          case 20: 
            { return CONSTANTE;
            }
          case 47: break;
          case 21: 
            { return BOOLEANO;
            }
          case 48: break;
          case 22: 
            { return CALIFICADOR;
            }
          case 49: break;
          case 23: 
            { return LIBRERIA;
            }
          case 50: break;
          case 24: 
            { return FUNCION_TIEMPO;
            }
          case 51: break;
          case 25: 
            { return ESTRUCTURA_INICIO_EJECUCION;
            }
          case 52: break;
          case 26: 
            { return FUNCION_ES_DIGITAL;
            }
          case 53: break;
          case 27: 
            { return FUNCION_ES_ANALOGICA;
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
