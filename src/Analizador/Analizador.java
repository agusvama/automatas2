/* The following code was generated by JFlex 1.6.1 */

package Analizador;

import static Analizador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/maldad/Documents/tec/9no/automatas2/projects/Analizador_lexico_java/src/Analizador/lexer.flex</tt>
 */
class Analizador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\4\1\4\1\4\1\4\22\0\1\6\1\24\4\0\1\51"+
    "\1\0\1\35\1\36\1\10\1\22\1\23\1\22\1\7\1\53\12\0"+
    "\1\54\1\11\3\24\2\0\16\20\1\52\3\20\1\45\7\20\6\0"+
    "\1\2\1\43\1\41\1\42\1\16\1\12\1\21\1\13\1\25\1\1"+
    "\1\46\1\17\1\26\1\34\1\27\1\14\1\20\1\30\1\32\1\31"+
    "\1\15\1\3\1\33\1\5\1\44\1\47\1\37\1\50\1\40\7\0"+
    "\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\6\0\1\2\15\0\1\1\17\0\1\3"+
    "\20\0\1\3\4\0\1\4\1\5\1\0\1\6\13\0"+
    "\1\3\7\0\1\7\6\0\1\10\21\0\1\11\5\0"+
    "\1\7\6\0\1\7\7\0\1\12\24\0\1\12\1\10"+
    "\11\0\1\10\4\0\1\3\26\0\1\13\1\14\35\0"+
    "\1\15\23\0\1\16\3\0\1\17\5\0\1\20\27\0"+
    "\1\21\25\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\264\0\u0168\0\u0195\0\u01c2\0\341\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681"+
    "\0\u06ae\0\u06db\0\55\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\341\0\341\0\u0ab9\0\341\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\55\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\341\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\264\0\u1356"+
    "\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\55\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\264\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\55\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7"+
    "\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u0ec4\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a"+
    "\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\55\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\341\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8"+
    "\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\u27e7\0\u2814\0\341\0\u2841\0\u286e\0\u289b"+
    "\0\341\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\341\0\u29a9"+
    "\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11"+
    "\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79"+
    "\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\341\0\u2db4"+
    "\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c"+
    "\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057\0\u3084"+
    "\0\u30b1\0\u30de\0\u310b\0\u3138\0\341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\2\1\5\1\0"+
    "\1\6\1\0\1\7\1\2\1\10\1\11\1\12\1\13"+
    "\1\2\1\14\1\6\1\5\1\15\1\16\1\2\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\4\0\1\24\1\25"+
    "\1\26\1\2\1\27\2\2\1\30\1\31\1\32\1\33"+
    "\2\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\2\2\4\11"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\3\11\1\36"+
    "\2\2\1\34\3\0\2\11\1\37\4\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\1\40"+
    "\2\11\3\2\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\3\11"+
    "\3\2\1\34\3\0\3\11\4\2\2\0\1\2\60\0"+
    "\1\2\1\41\1\2\1\0\2\2\3\0\5\2\1\42"+
    "\2\2\1\0\1\2\1\0\1\43\1\2\1\44\5\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\2\1\45"+
    "\1\11\1\0\1\2\1\35\3\0\2\2\4\11\2\2"+
    "\1\0\1\11\1\0\1\11\1\2\3\11\3\2\1\34"+
    "\3\0\3\11\4\2\2\0\1\2\3\0\1\2\2\11"+
    "\1\0\1\46\1\35\3\0\2\2\3\11\1\47\2\2"+
    "\1\0\1\11\1\0\1\11\1\2\3\11\2\2\1\50"+
    "\1\34\3\0\3\11\4\2\2\0\1\2\3\0\1\2"+
    "\2\11\1\0\1\2\1\35\3\0\2\2\4\11\2\2"+
    "\1\0\1\11\1\0\1\11\1\2\1\51\2\11\3\2"+
    "\1\34\3\0\3\11\4\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\2\2"+
    "\1\52\5\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\1\53\1\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\54\3\11"+
    "\2\2\1\55\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\2\11\1\56\1\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\1\2\2\11\1\0\1\2\1\35\3\0"+
    "\1\2\1\57\4\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\1\11\1\60\1\11\3\2\1\34\3\0\3\11"+
    "\4\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\3\2\1\61\4\2\1\0\1\2\1\0\4\2\1\62"+
    "\1\2\1\63\1\2\1\34\3\0\3\2\1\64\3\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\1\2"+
    "\1\65\6\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\4\2\1\66\3\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\1\2\1\67\1\11"+
    "\1\0\1\2\1\35\3\0\1\2\1\70\3\11\1\71"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\1\72\2\11"+
    "\3\2\1\34\3\0\3\11\4\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\2\2\2\11"+
    "\1\73\1\11\2\2\1\0\1\11\1\0\1\11\1\2"+
    "\1\74\2\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\1\2\2\11\1\0\1\2\1\35\3\0"+
    "\2\2\4\11\2\2\1\0\1\11\1\0\1\11\1\2"+
    "\1\75\1\76\1\11\3\2\1\34\3\0\3\11\1\77"+
    "\3\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\4\2\1\100\3\2\1\34"+
    "\3\0\7\2\2\0\1\2\52\0\1\101\55\0\1\102"+
    "\4\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\2\2\1\103\4\2\2\0"+
    "\1\2\55\0\1\104\37\0\1\105\17\0\1\2\2\106"+
    "\1\0\1\2\1\107\3\0\2\110\2\11\2\106\2\2"+
    "\1\0\1\106\1\0\1\106\1\2\3\106\2\2\1\110"+
    "\1\34\3\0\1\111\2\106\4\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\5\2\1\112\2\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\3\11"+
    "\1\113\2\2\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\114\1\2\3\11"+
    "\3\2\1\34\3\0\3\11\4\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\5\2\1\115\2\2\1\0"+
    "\1\2\1\0\10\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\2\2\1\116\5\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\7\2\1\117\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\3\2\1\120\4\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\1\2\2\11\1\0\1\2\1\35"+
    "\3\0\2\2\4\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\1\121\2\11\4\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\4\2\1\122\3\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\1\2\2\11\1\0\1\2"+
    "\1\35\3\0\2\2\4\11\2\2\1\0\1\11\1\0"+
    "\1\11\1\2\3\11\1\123\2\2\1\34\3\0\3\11"+
    "\4\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\3\2\1\124\4\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\1\2\2\11\1\0"+
    "\1\2\1\35\3\0\2\2\4\11\2\2\1\0\1\11"+
    "\1\0\1\11\1\2\3\11\2\2\1\125\1\34\3\0"+
    "\3\11\4\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\4\2\1\126\3\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\2\2\1\127\5\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\4\2"+
    "\1\130\1\131\2\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\2\11"+
    "\1\132\3\2\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\1\133\2\2\1\134\4\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\1\2\1\135\1\11\1\0\1\2"+
    "\1\35\3\0\2\2\1\11\1\136\2\11\2\2\1\0"+
    "\1\11\1\0\1\11\1\2\3\11\3\2\1\34\3\0"+
    "\3\11\1\137\3\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\2\2\1\140\5\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\1\2"+
    "\1\141\1\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\1\142\7\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\7\2\1\143\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\1\144\7\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\6\2\1\137\1\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\2\11"+
    "\1\145\1\146\2\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\1\2\1\147\1\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\1\2\1\150\1\11\1\0\1\2"+
    "\1\35\3\0\2\2\4\11\2\2\1\0\1\11\1\0"+
    "\1\11\1\2\3\11\3\2\1\34\3\0\3\11\4\2"+
    "\2\0\1\2\3\0\1\2\2\11\1\0\1\2\1\35"+
    "\3\0\2\2\4\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\2\2\1\151\1\34\3\0\3\11\4\2"+
    "\2\0\1\2\3\0\1\2\2\11\1\0\1\2\1\35"+
    "\3\0\1\152\1\2\4\11\2\2\1\0\1\11\1\0"+
    "\1\11\1\2\3\11\3\2\1\34\3\0\3\11\4\2"+
    "\2\0\1\2\3\0\1\2\2\11\1\0\1\2\1\35"+
    "\3\0\2\2\1\11\1\153\2\11\2\2\1\0\1\11"+
    "\1\0\1\11\1\2\3\11\3\2\1\34\3\0\3\11"+
    "\4\2\2\0\1\2\3\0\1\2\2\11\1\0\1\2"+
    "\1\35\3\0\2\2\4\11\2\2\1\0\1\11\1\0"+
    "\1\11\1\2\1\154\2\11\3\2\1\34\3\0\3\11"+
    "\4\2\2\0\1\2\3\0\1\2\2\11\1\0\1\2"+
    "\1\35\3\0\2\2\2\11\1\155\1\11\2\2\1\0"+
    "\1\11\1\0\1\11\1\2\3\11\3\2\1\34\3\0"+
    "\3\11\4\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\4\2\1\156\3\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\3\2\1\157"+
    "\4\2\1\34\3\0\7\2\2\0\1\2\3\0\1\160"+
    "\2\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\13\0\1\161"+
    "\44\0\1\2\2\106\1\0\1\2\1\162\3\0\2\110"+
    "\2\11\2\106\2\2\1\0\1\106\1\0\1\106\1\2"+
    "\3\106\2\2\1\110\1\34\3\0\3\106\4\2\2\0"+
    "\1\2\3\0\1\2\2\106\1\0\1\2\1\162\3\0"+
    "\2\110\2\11\2\106\2\2\1\0\1\106\1\0\1\106"+
    "\1\2\3\106\2\2\1\110\1\34\3\0\1\111\2\106"+
    "\4\2\2\0\1\2\3\0\1\2\2\110\1\0\1\2"+
    "\1\163\3\0\2\110\2\2\2\110\2\2\1\0\1\110"+
    "\1\0\1\110\1\2\3\110\2\2\1\110\1\34\3\0"+
    "\3\110\4\2\2\0\1\2\3\0\1\2\2\106\1\0"+
    "\1\2\1\162\3\0\2\110\2\11\1\106\1\164\2\2"+
    "\1\0\1\106\1\0\1\106\1\2\3\106\2\2\1\110"+
    "\1\34\3\0\3\106\4\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\4\2\1\165\3\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\4\2\1\166\3\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\3\11"+
    "\3\2\1\34\3\0\1\11\1\167\1\11\4\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\5\2\1\170\2\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\1\2\1\171\1\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\1\2\1\172\1\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\173\3\0"+
    "\7\2\2\0\1\2\3\0\1\2\2\11\1\0\1\2"+
    "\1\35\3\0\2\2\4\11\2\2\1\0\1\11\1\0"+
    "\1\11\1\2\3\11\3\2\1\34\3\0\3\11\2\2"+
    "\1\174\1\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\4\2\1\175\3\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\4\2\1\53\3\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\1\2"+
    "\1\137\6\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\7\2\1\176\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\2\2\1\137\5\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\5\2\1\177\2\2"+
    "\1\0\1\2\1\0\2\2\1\200\5\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\4\2\1\201\3\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\4\2\1\202\3\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\2\2\11"+
    "\1\0\1\2\1\35\3\0\2\2\1\11\1\203\2\11"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\3\11\3\2"+
    "\1\34\3\0\3\11\4\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\5\2"+
    "\1\137\2\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\2\2\1\204\5\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\4\11\2\2\1\0\1\11\1\0\1\11\1\2\3\11"+
    "\2\2\1\205\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\2\11\1\206\1\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\4\2\1\207"+
    "\3\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\4\2\1\210\3\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\4\2\1\211\3\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\1\212\6\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\5\2\1\213\2\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\2\2\11"+
    "\1\0\1\2\1\35\3\0\2\2\4\11\2\2\1\0"+
    "\1\11\1\0\1\11\1\2\3\11\3\2\1\34\3\0"+
    "\1\214\2\11\4\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\4\2\1\137\3\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\3\2"+
    "\1\176\4\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\2\2\4\11"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\3\11\1\133"+
    "\2\2\1\34\3\0\3\11\4\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\4\2\1\215\3\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\1\216\1\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\1\2\2\11\1\0\1\2\1\35\3\0"+
    "\2\2\4\11\2\2\1\0\1\11\1\0\1\11\1\2"+
    "\3\11\3\2\1\34\3\0\2\11\1\217\4\2\2\0"+
    "\1\2\3\0\1\2\2\11\1\0\1\2\1\35\3\0"+
    "\2\2\3\11\1\220\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\1\2\1\221\1\11\1\0\1\2\1\35"+
    "\3\0\2\2\4\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\4\2\1\176"+
    "\3\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\1\222\7\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\4\2"+
    "\1\223\3\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\1\224\2\225\1\0\1\224"+
    "\1\226\3\0\2\224\4\225\2\224\1\0\1\225\1\0"+
    "\1\225\1\224\3\225\3\224\1\34\3\0\1\227\2\225"+
    "\4\224\2\0\1\224\3\0\3\224\1\0\2\224\3\0"+
    "\10\224\1\0\1\224\1\0\10\224\1\34\3\0\7\224"+
    "\2\0\1\224\3\0\1\2\1\230\1\106\1\0\1\2"+
    "\1\162\3\0\2\110\2\11\2\106\2\2\1\0\1\106"+
    "\1\0\1\106\1\2\3\106\2\2\1\110\1\34\3\0"+
    "\3\106\4\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\3\2\1\231\4\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\3\2\1\232"+
    "\4\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\4\2\1\233\3\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\4\2\1\176\3\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\5\2\1\234\2\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\235\1\0\2\235\3\0\1\236\7\235"+
    "\1\0\1\235\1\0\10\235\1\0\1\105\2\0\7\235"+
    "\2\0\1\235\3\0\1\2\1\237\1\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\7\2\1\240\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\4\2\1\241\3\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\3\2\1\242\4\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\3\2\1\243"+
    "\4\2\1\34\3\0\7\2\2\0\1\2\3\0\1\2"+
    "\1\244\1\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\2\2\4\11"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\1\11\1\245"+
    "\1\11\3\2\1\34\3\0\3\11\4\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\6\2\1\246\1\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\5\2\1\247\2\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\3\2\1\137\4\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\1\250\7\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\10\2\1\34\3\0\1\251"+
    "\6\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\1\2\1\252\6\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\4\2\1\253\3\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\2\2\11"+
    "\1\0\1\2\1\35\3\0\1\2\1\137\4\11\2\2"+
    "\1\0\1\11\1\0\1\11\1\2\3\11\3\2\1\34"+
    "\3\0\3\11\4\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\1\254\7\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\3\2\1\255\4\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\1\2"+
    "\2\11\1\0\1\2\1\35\3\0\2\2\3\11\1\256"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\3\11\3\2"+
    "\1\34\3\0\3\11\4\2\2\0\1\2\3\0\1\2"+
    "\2\11\1\0\1\2\1\35\3\0\2\2\2\11\1\257"+
    "\1\11\2\2\1\0\1\11\1\0\1\11\1\2\3\11"+
    "\3\2\1\34\3\0\3\11\4\2\2\0\1\2\3\0"+
    "\1\2\2\11\1\0\1\2\1\35\3\0\2\2\4\11"+
    "\2\2\1\0\1\11\1\0\1\11\1\2\3\11\3\2"+
    "\1\34\3\0\3\11\2\2\1\53\1\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\7\2\1\260\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\1\261\6\2\2\0\1\2"+
    "\3\0\3\224\1\0\2\224\3\0\10\224\1\0\1\224"+
    "\1\0\10\224\1\262\3\0\7\224\2\0\1\224\3\0"+
    "\1\224\2\225\1\0\1\224\1\226\3\0\2\224\4\225"+
    "\2\224\1\0\1\225\1\0\1\225\1\224\3\225\3\224"+
    "\1\262\3\0\3\225\4\224\2\0\1\224\3\0\1\224"+
    "\2\225\1\0\1\224\1\226\3\0\2\224\4\225\2\224"+
    "\1\0\1\225\1\0\1\225\1\224\3\225\3\224\1\262"+
    "\3\0\1\227\2\225\4\224\2\0\1\224\3\0\1\224"+
    "\2\225\1\0\1\224\1\226\3\0\2\224\3\225\1\263"+
    "\2\224\1\0\1\225\1\0\1\225\1\224\3\225\3\224"+
    "\1\262\3\0\3\225\4\224\2\0\1\224\3\0\1\2"+
    "\2\106\1\0\1\2\1\162\3\0\2\110\2\11\2\106"+
    "\2\2\1\0\1\106\1\0\1\106\1\2\3\106\1\264"+
    "\1\2\1\110\1\34\3\0\3\106\4\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\4\2\1\137\3\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\1\2\1\265\1\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\5\2"+
    "\1\266\2\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\235\1\0\1\235\1\267"+
    "\3\0\10\235\1\0\1\235\1\0\10\235\4\0\7\235"+
    "\2\0\1\235\3\0\3\235\1\0\1\235\1\267\3\0"+
    "\10\235\1\0\1\235\1\0\2\235\1\270\5\235\4\0"+
    "\7\235\2\0\1\235\3\0\3\2\1\0\2\2\3\0"+
    "\7\2\1\146\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\10\2\1\34\3\0\1\2"+
    "\1\133\5\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\1\2\1\271\6\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\4\2\1\272"+
    "\3\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\1\273\7\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\7\2"+
    "\1\274\1\34\3\0\7\2\2\0\1\2\3\0\1\2"+
    "\2\11\1\0\1\2\1\35\3\0\2\2\4\11\2\2"+
    "\1\0\1\11\1\0\1\11\1\2\3\11\2\2\1\53"+
    "\1\34\3\0\3\11\4\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\1\275"+
    "\7\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\1\137\6\2\2\0\1\2\3\0\3\2"+
    "\1\0\2\2\3\0\1\2\1\53\6\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\3\2\1\276\4\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\277\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\7\2\1\300\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\5\2\1\231\2\2\1\0"+
    "\1\2\1\0\10\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\2\11\1\0\1\2\1\35\3\0\2\2"+
    "\2\11\1\167\1\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\1\2\1\301\1\11\1\0\1\2\1\35"+
    "\3\0\2\2\4\11\2\2\1\0\1\11\1\0\1\11"+
    "\1\2\3\11\3\2\1\34\3\0\3\11\4\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\7\2\1\302"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\4\2\1\303\3\2\1\34\3\0\7\2"+
    "\2\0\1\2\40\0\1\304\17\0\1\224\1\305\1\225"+
    "\1\0\1\224\1\226\3\0\2\224\4\225\2\224\1\0"+
    "\1\225\1\0\1\225\1\224\3\225\3\224\1\262\3\0"+
    "\3\225\4\224\2\0\1\224\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\5\2\1\306\2\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\1\231\6\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\10\2\1\34"+
    "\3\0\3\2\1\137\3\2\2\0\1\2\3\0\3\307"+
    "\1\0\2\307\3\0\10\307\1\0\1\307\1\0\10\307"+
    "\4\0\7\307\2\0\1\307\3\0\3\235\1\0\1\235"+
    "\1\267\3\0\10\235\1\0\1\235\1\0\3\235\1\310"+
    "\4\235\4\0\7\235\2\0\1\235\3\0\3\2\1\0"+
    "\2\2\3\0\4\2\1\311\3\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\2"+
    "\1\0\1\2\1\312\3\0\10\2\1\0\1\2\1\0"+
    "\1\313\7\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\2\1\314\1\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\10\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\1\315\6\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\4\2\1\316\3\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\2\2\1\317\5\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\320\1\0\2\320\3\0\10\320"+
    "\1\0\1\320\1\0\6\320\1\321\1\320\1\0\1\105"+
    "\2\0\7\320\2\0\1\320\3\0\3\2\1\0\2\2"+
    "\3\0\3\2\1\123\4\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\2\2\11"+
    "\1\0\1\2\1\35\3\0\2\2\4\11\2\2\1\0"+
    "\1\11\1\0\1\11\1\2\3\11\2\2\1\176\1\34"+
    "\3\0\3\11\4\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\1\322\2\0\10\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\13\0\1\161\25\0"+
    "\1\323\16\0\1\224\2\225\1\0\1\224\1\226\3\0"+
    "\2\224\4\225\2\224\1\0\1\225\1\0\1\225\1\224"+
    "\3\225\1\324\2\224\1\262\3\0\3\225\4\224\2\0"+
    "\1\224\3\0\3\2\1\0\1\2\1\325\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\1\326\6\2"+
    "\2\0\1\2\3\0\3\307\1\0\2\307\3\0\10\307"+
    "\1\0\1\307\1\0\10\307\4\0\7\307\2\0\1\307"+
    "\1\0\1\327\1\0\3\235\1\0\1\235\1\267\3\0"+
    "\10\235\1\0\1\235\1\0\10\235\1\330\3\0\7\235"+
    "\2\0\1\235\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\7\2\1\331\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\1\332\2\2\1\0\1\2\1\312"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\333\6\2\1\34"+
    "\3\0\7\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\1\146\6\2\2\0\1\2\3\0\3\2\1\0\2\2"+
    "\3\0\4\2\1\334\3\2\1\0\1\2\1\0\10\2"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\7\2\1\231"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\7\2\1\335"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\3\320\1\0"+
    "\1\320\1\336\3\0\10\320\1\0\1\336\1\337\10\320"+
    "\4\0\7\320\2\0\1\320\3\0\3\320\1\0\1\320"+
    "\1\336\3\0\1\320\1\340\6\320\1\0\1\336\1\337"+
    "\10\320\4\0\7\320\2\0\1\320\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\10\2\4\0"+
    "\7\2\2\0\1\2\42\0\1\341\15\0\3\224\1\0"+
    "\2\224\3\0\10\224\1\0\1\224\1\0\5\224\1\342"+
    "\2\224\1\262\3\0\7\224\2\0\1\224\3\0\3\343"+
    "\1\0\2\343\3\0\10\343\1\0\1\343\1\0\10\343"+
    "\1\34\3\0\7\343\2\0\1\343\3\0\3\2\1\0"+
    "\2\2\3\0\5\2\1\344\2\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\3\0\3\345"+
    "\1\0\2\345\3\0\10\345\1\0\1\345\1\0\10\345"+
    "\4\0\7\345\2\0\1\345\1\0\1\327\1\0\3\235"+
    "\1\0\2\235\3\0\1\236\7\235\1\0\1\235\1\0"+
    "\10\235\4\0\7\235\2\0\1\235\3\0\3\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\4\2\1\133"+
    "\3\2\1\34\3\0\7\2\2\0\1\2\3\0\1\2"+
    "\1\346\1\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\2\2\1\347\5\2\1\0"+
    "\1\2\1\0\10\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\3\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\2\2\1\350\5\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\1\351\7\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\352\1\0\2\352\3\0\10\352\1\0"+
    "\1\352\1\337\10\352\4\0\7\352\2\0\1\352\3\0"+
    "\3\353\1\0\1\353\1\354\3\0\10\353\1\0\1\354"+
    "\1\337\10\353\4\0\7\353\2\0\1\353\3\0\3\320"+
    "\1\0\1\320\1\336\3\0\10\320\1\0\1\336\1\337"+
    "\1\355\7\320\4\0\7\320\2\0\1\320\3\0\3\224"+
    "\1\0\1\224\1\356\3\0\10\224\1\0\1\224\1\0"+
    "\10\224\1\262\3\0\1\357\6\224\2\0\1\224\3\0"+
    "\3\343\1\0\2\343\3\0\10\343\1\0\1\343\1\0"+
    "\10\343\1\34\1\0\1\360\1\0\7\343\2\0\1\343"+
    "\3\0\1\2\1\361\1\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\345\1\0\2\345\3\0\10\345\1\0"+
    "\1\345\1\0\10\345\1\0\1\362\2\0\7\345\2\0"+
    "\1\345\3\0\2\2\1\363\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\7\2\2\0"+
    "\1\2\3\0\3\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\2\2\1\200\5\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\1\137"+
    "\7\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\6\2\1\364"+
    "\2\0\1\2\3\0\3\352\1\0\2\352\3\0\10\352"+
    "\1\0\1\352\1\337\10\352\1\0\1\365\2\0\7\352"+
    "\2\0\1\352\3\0\3\353\1\0\2\353\3\0\10\353"+
    "\1\0\1\353\1\0\10\353\1\0\1\365\2\0\7\353"+
    "\2\0\1\353\3\0\3\353\1\0\1\353\1\354\3\0"+
    "\10\353\1\0\1\354\1\337\10\353\1\0\1\365\2\0"+
    "\7\353\2\0\1\353\3\0\3\320\1\0\1\320\1\336"+
    "\3\0\5\320\1\366\2\320\1\0\1\336\1\337\10\320"+
    "\4\0\7\320\2\0\1\320\3\0\3\367\1\0\2\367"+
    "\3\0\10\367\1\0\1\367\1\0\10\367\1\262\3\0"+
    "\7\367\2\0\1\367\3\0\3\224\1\0\2\224\3\0"+
    "\5\224\1\370\2\224\1\0\1\224\1\0\10\224\1\262"+
    "\3\0\7\224\2\0\1\224\42\0\1\371\15\0\3\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\5\2"+
    "\1\264\2\2\1\34\3\0\7\2\2\0\1\2\41\0"+
    "\1\372\16\0\1\2\1\373\1\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\10\2\1\34\3\0\7\2"+
    "\2\0\1\2\3\0\3\2\1\0\2\2\3\0\4\2"+
    "\1\374\3\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\320\1\0\1\320\1\336"+
    "\3\0\4\320\1\375\3\320\1\0\1\336\1\337\10\320"+
    "\4\0\7\320\2\0\1\320\3\0\3\367\1\0\2\367"+
    "\3\0\10\367\1\0\1\367\1\0\10\367\1\262\1\0"+
    "\1\360\1\0\7\367\2\0\1\367\3\0\1\224\1\376"+
    "\1\224\1\0\2\224\3\0\10\224\1\0\1\224\1\0"+
    "\10\224\1\262\3\0\7\224\2\0\1\224\42\0\1\377"+
    "\14\0\1\u0100\3\u0101\1\0\1\u0102\1\u0101\3\u0100\10\u0101"+
    "\1\u0100\1\u0101\1\u0100\10\u0101\1\u0103\3\u0100\7\u0101\2\u0100"+
    "\1\u0101\2\u0100\1\0\3\2\1\0\2\2\3\0\10\2"+
    "\1\0\1\2\1\0\10\2\1\34\3\0\1\2\1\137"+
    "\5\2\2\0\1\2\3\0\3\320\1\0\1\320\1\336"+
    "\3\0\10\320\1\0\1\336\1\337\10\320\1\u0104\3\0"+
    "\7\320\2\0\1\320\3\0\3\224\1\0\2\224\3\0"+
    "\10\224\1\0\1\224\1\0\5\224\1\324\2\224\1\262"+
    "\3\0\7\224\2\0\1\224\3\0\1\u0105\1\u0106\3\0"+
    "\2\u0106\3\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0"+
    "\1\u0106\3\0\3\u0106\1\0\1\u0106\1\0\2\u0106\21\0"+
    "\1\u0107\1\u0108\1\2\1\0\1\2\1\u0108\1\u0106\2\0"+
    "\1\2\1\u0108\1\2\1\u0108\1\2\1\u0108\1\2\1\u0108"+
    "\1\0\1\2\1\0\3\u0108\1\2\1\u0108\1\2\2\u0108"+
    "\1\34\3\0\7\2\2\0\1\2\2\0\1\u0109\1\u010a"+
    "\1\u010b\1\u010c\1\0\1\u010c\1\u010b\1\u010d\2\u0109\1\u010c"+
    "\1\u010b\1\u010c\1\u010b\1\u010c\1\u010b\1\u010c\1\u010b\1\u0109"+
    "\1\u010c\1\u0109\3\u010b\1\u010c\1\u010b\1\u010c\2\u010b\1\u010e"+
    "\3\u0109\7\u010c\2\u0109\1\u010c\2\u0109\1\0\1\u0105\1\u0106"+
    "\3\0\2\u0106\3\0\1\u0106\1\0\1\u0106\1\0\1\u0106"+
    "\1\0\1\u0106\3\0\3\u0106\1\0\1\u0106\1\0\2\u0106"+
    "\1\0\1\105\17\0\3\320\1\0\2\320\3\0\10\320"+
    "\1\0\1\320\1\0\6\320\1\321\1\320\4\0\7\320"+
    "\2\0\1\320\4\0\1\u010f\54\0\1\u0106\3\0\2\u0106"+
    "\1\u0110\2\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0"+
    "\1\u0106\3\0\3\u0106\1\0\1\u0106\1\0\2\u0106\21\0"+
    "\1\2\1\u0111\1\2\1\0\2\2\3\0\10\2\1\0"+
    "\1\2\1\0\10\2\1\34\3\0\7\2\2\0\1\2"+
    "\3\0\1\2\1\u0108\1\2\1\0\1\2\1\u0108\1\u0106"+
    "\1\u0110\1\0\1\2\1\u0108\1\2\1\u0108\1\2\1\u0108"+
    "\1\2\1\u0108\1\0\1\2\1\0\3\u0108\1\2\1\u0108"+
    "\1\2\2\u0108\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\u0112\30\0\1\u0113\23\0\1\u0114\1\u0111\1\2\1\0"+
    "\2\2\3\0\10\2\1\0\1\2\1\0\5\2\1\u0115"+
    "\2\2\1\34\3\0\7\2\2\0\1\2\3\0\1\u0114"+
    "\1\u0108\1\2\1\0\1\2\1\u0108\1\u0106\1\u0110\1\0"+
    "\1\2\1\u0108\1\2\1\u0108\1\2\1\u0108\1\2\1\u0108"+
    "\1\0\1\2\1\0\3\u0108\1\2\1\u0108\1\u0115\2\u0108"+
    "\1\34\3\0\7\2\2\0\1\2\3\0\1\u0114\2\2"+
    "\1\0\2\2\3\0\10\2\1\0\1\2\1\0\5\2"+
    "\1\u0115\2\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\1\u0112\1\u0106\3\0\2\u0106\1\u0110\2\0\1\u0106\1\0"+
    "\1\u0106\1\0\1\u0106\1\0\1\u0106\3\0\3\u0106\1\0"+
    "\1\u0106\1\u0113\2\u0106\21\0\1\u0112\30\0\1\u0113\3\0"+
    "\1\105\21\0\1\u0116\61\0\1\u0110\1\u0117\44\0\2\2"+
    "\1\u0118\1\0\2\2\3\0\10\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\4\0\1\u0119"+
    "\105\0\1\u011a\22\0\1\2\1\u011b\1\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\6\2\1\u011c\1\2\1\34"+
    "\3\0\7\2\2\0\1\2\4\0\1\u011d\53\0\1\2"+
    "\1\u011e\1\2\1\0\2\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\5\0"+
    "\1\u011f\76\0\1\u0120\30\0\2\2\1\u0121\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\1\u0122\7\2\1\34\3\0"+
    "\7\2\2\0\1\2\2\0\4\u0100\1\0\51\u0100\3\u0101"+
    "\1\0\2\u0101\3\u0100\10\u0101\1\u0100\1\u0101\1\u0100\10\u0101"+
    "\1\u0103\3\u0100\7\u0101\2\u0100\1\u0101\2\u0100\2\0\1\u0123"+
    "\106\0\1\u0124\21\0\1\2\1\u0125\1\2\1\0\2\2"+
    "\3\0\10\2\1\0\1\2\1\0\10\2\1\34\3\0"+
    "\7\2\2\0\1\2\3\0\3\2\1\0\2\2\3\0"+
    "\10\2\1\0\1\2\1\0\7\2\1\u0126\1\34\3\0"+
    "\7\2\2\0\1\2\7\0\1\u0127\70\0\1\u0128\34\0"+
    "\3\2\1\0\1\u0129\1\2\3\0\10\2\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\3\0"+
    "\3\2\1\0\2\2\3\0\7\2\1\u012a\1\0\1\2"+
    "\1\0\10\2\1\34\3\0\7\2\2\0\1\2\2\0"+
    "\4\u0109\1\0\50\u0109\7\0\1\u012b\45\0\1\u0109\3\u010c"+
    "\1\0\2\u010c\3\u0109\10\u010c\1\u0109\1\u010c\1\u0109\10\u010c"+
    "\1\u010e\3\u0109\7\u010c\2\u0109\1\u010c\2\u0109\1\0\3\2"+
    "\1\0\2\2\1\u012b\2\0\10\2\1\0\1\2\1\0"+
    "\10\2\1\34\3\0\7\2\2\0\1\2\12\0\1\u012c"+
    "\21\0\1\u0113\32\0\1\u012c\1\u012d\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\6\0\1\11\15\0\1\1\17\0"+
    "\1\1\20\0\1\1\4\0\2\11\1\0\1\11\13\0"+
    "\1\1\7\0\1\1\6\0\1\1\21\0\1\11\5\0"+
    "\1\1\6\0\1\1\7\0\1\1\24\0\2\1\11\0"+
    "\1\1\4\0\1\1\26\0\2\1\35\0\1\11\23\0"+
    "\1\11\3\0\1\11\5\0\1\11\27\0\1\11\25\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public String nombreMetodo;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Analizador(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return OPERADOR;
            }
          case 19: break;
          case 2: 
            { return COMPARADOR;
            }
          case 20: break;
          case 3: 
            { return ESTRUCTURA_CONTROL;
            }
          case 21: break;
          case 4: 
            { return COMPARADOR_OR;
            }
          case 22: break;
          case 5: 
            { return COMPARADOR_AND;
            }
          case 23: break;
          case 6: 
            { return ESCAPE_COMENTARIO;
            }
          case 24: break;
          case 7: 
            { return TIPO_DATO;
            }
          case 25: break;
          case 8: 
            { return PALABRA_RESERVADA;
            }
          case 26: break;
          case 9: 
            { return LLAMADA_METODO;
            }
          case 27: break;
          case 10: 
            { return CONSTANTE_BOOLEANA;
            }
          case 28: break;
          case 11: 
            { return CLASE_CADENA_CARACTERES;
            }
          case 29: break;
          case 12: 
            { return SUPERCLASE;
            }
          case 30: break;
          case 13: 
            { return DECLARACION_METODO;
            }
          case 31: break;
          case 14: 
            { return ESTRUCTURA_WHILE;
            }
          case 32: break;
          case 15: 
            { return DECLARACION_CLASE;
            }
          case 33: break;
          case 16: 
            { return FOR_MEJORADO;
            }
          case 34: break;
          case 17: 
            { return IMPORTAR_PAQUETE;
            }
          case 35: break;
          case 18: 
            { return IMPORTAR_COMPONENTE_SWING;
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
